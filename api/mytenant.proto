// Copyright Â© 2025 Prabhjot Singh Sethi, All Rights reserved
// Author: Prabhjot Singh Sethi <prabhjot.sethi@gmail.com>

syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "coreapis/api/role.proto";

option go_package = "github.com/go-core-stack/auth-gateway/api";

// service provided to manage tenant configuration
service MyTenant {
  // Get Password policy configuration
  rpc GetMyPasswordPolicy(MyPasswordPolicyGetReq) returns (MyPasswordPolicyGetResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/password-policy"
    };
    option (api.role) = {
      resource: "password-policy"
      verb: "get"
    };
  }

  // Update Password policy configuration
  rpc UpdateMyPasswordPolicy(MyPasswordPolicyUpdateReq) returns (MyPasswordPolicyUpdateResp) {
    option (google.api.http) = {
      put: "/api/mytenant/v1/password-policy"
      body: "*"
    };
    option (api.role) = {
      resource: "password-policy"
      verb: "update"
    };
  }

  // List supported identity provider types (like Keycloak providers endpoint)
  rpc GetIdentityProviderTypes(IdpProvidersReq) returns (IdpProvidersResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/identity-provider-types"
    };
    option (api.role) = {
      resource: "tenant-idp"
      verb: "list"
    };
  }

  // Create identity provider instance (like Keycloak instances endpoint)
  rpc CreateIdentityProviderInstance(IdpInstanceCreateReq) returns (IdpInstanceCreateResp) {
    option (google.api.http) = {
      post: "/api/mytenant/v1/identity-provider"
      body: "*"
    };
    option (api.role) = {
      resource: "tenant-idp"
      verb: "create"
    };
  }

  // List all configured identity provider instances for the tenant
  rpc ListIdentityProviderInstances(IdpInstanceListReq) returns (IdpInstanceListResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/identity-provider"
    };
    option (api.role) = {
      resource: "tenant-idp"
      verb: "list"
    };
  }

  // Get identity provider instance configuration (like Keycloak instances endpoint)
  rpc GetIdentityProviderInstance(IdpInstanceGetReq) returns (IdpInstanceGetResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/identity-provider/{key}"
    };
    option (api.role) = {
      resource: "tenant-idp"
      verb: "get"
    };
  }

  // Update identity provider instance configuration (like Keycloak instances endpoint)
  rpc UpdateIdentityProviderInstance(IdpInstanceUpdateReq) returns (IdpInstanceUpdateResp) {
    option (google.api.http) = {
      put: "/api/mytenant/v1/identity-provider/{key}"
      body: "*"
    };
    option (api.role) = {
      resource: "tenant-idp"
      verb: "update"
    };
  }

  // Delete identity provider instance (like Keycloak instances endpoint)
  rpc DeleteIdentityProviderInstance(IdpInstanceDeleteReq) returns (IdpInstanceDeleteResp) {
    option (google.api.http) = {
      delete: "/api/mytenant/v1/identity-provider/{key}"
    };
    option (api.role) = {
      resource: "tenant-idp"
      verb: "delete"
    };
  }
}

// password policy get request
message MyPasswordPolicyGetReq {
}

// password policy get response
message MyPasswordPolicyGetResp {
  // minimum number of lower case characters in password
  int32 minLower = 1;

  // minimum number of upper case characters in password
  int32 minUpper = 2;

  // minimum number of digits in password
  int32 minDigits = 3;

  // minimum number of special characters in password
  int32 minSpecial = 4;

  // minimum length of password
  int32 minLength = 5;

  // maximum length of password
  int32 maxLength = 6;

  // do not allow last x recently used passwords
  int32 recentlyUsed = 7;

  // do not allow password reuse before x days
  int32 passwordAge = 8;

  // expire password after x days, trigger force change
  int32 forceExpirePasswordChange = 9;
}

// password policy update request
message MyPasswordPolicyUpdateReq {
  // minimum number of lower case characters in password
  int32 minLower = 1;

  // minimum number of upper case characters in password
  int32 minUpper = 2;

  // minimum number of digits in password
  int32 minDigits = 3;

  // minimum number of special characters in password
  int32 minSpecial = 4;

  // minimum length of password
  int32 minLength = 5;

  // maximum length of password
  int32 maxLength = 6;

  // do not allow last x recently used passwords
  int32 recentlyUsed = 7;

  // do not allow password reuse before x days
  int32 passwordAge = 8;

  // expire password after x days, trigger force change
  int32 forceExpirePasswordChange = 9;
}

// password policy update response
message MyPasswordPolicyUpdateResp {
}

// Identity Provider types
enum IdpProviderType {
  IdentityProviderUnspecified = 0;
  Google = 1;
  Microsoft = 2;
  OIDC = 3;
  SAML = 4;
}

// Configuration field metadata for validation
message IdpConfigField {
  string name = 1;
  string type = 2;
  bool required = 3;
  bool sensitive = 4;
  string description = 5;
  string default_value = 6;
  string validation = 7;
}

// Provider metadata
message IdpProviderMetadata {
  IdpProviderType provider_type = 1;
  string display_name = 2;
  string description = 3;
  repeated IdpConfigField config_fields = 4;
  repeated string supported_scopes = 5;
  repeated string default_scopes = 6;
  string documentation = 7;
}

// Identity provider providers request (list supported provider types)
message IdpProvidersReq {
  // Optional filter by provider type
  optional IdpProviderType providerType = 1;
}

// Identity provider providers response
message IdpProvidersResp {
  // Available provider types and their metadata
  repeated IdpProviderMetadata providers = 1;
}

// Identity provider instance create request
message IdpInstanceCreateReq {
  // Identity provider key (unique per tenant)
  string key = 1;

  // Display name
  string display_name = 2;

  // Provider type
  IdpProviderType provider_type = 3;

  // Whether configuration is enabled
  bool enabled = 4;

  // Display order for UI
  int32 display_order = 5;

  // Provider configuration (including sensitive fields)
  string configuration = 6;
}

// Identity provider instance create response
message IdpInstanceCreateResp {
  // Created identity provider key
  string key = 1;

  // Success message
  string message = 2;
}

// Identity provider instance list request
message IdpInstanceListReq {
  // Optional filter by provider type
  optional IdpProviderType provider_type = 1;

  // Optional filter by enabled status
  optional bool enabled = 2;

  // Optional pagination limit
  optional int32 limit = 3;

  // Optional pagination offset
  optional int32 offset = 4;
}

// Identity provider instance list response
message IdpInstanceListResp {
  // List of identity provider instances
  repeated IdpInstanceSummary instances = 1;

  // Total count of instances (for pagination)
  int32 total_count = 2;
}

// Identity provider instance summary (for list responses)
message IdpInstanceSummary {
  // Identity provider key
  string key = 1;

  // Display name
  string display_name = 2;

  // Provider type
  IdpProviderType provider_type = 3;

  // Whether configuration is enabled
  bool enabled = 4;

  // Display order for UI
  int32 display_order = 5;

  // Created timestamp
  int64 created = 6;

  // Updated timestamp
  int64 updated = 7;
}

// Identity provider instance get request
message IdpInstanceGetReq {
  // Identity provider key
  string key = 1;
}

// Identity provider instance get response
message IdpInstanceGetResp {
  // Identity provider key
  string key = 1;

  // Display name
  string display_name = 2;

  // Provider type
  IdpProviderType provider_type = 3;

  // Whether configuration is enabled
  bool enabled = 4;

  // Display order for UI
  int32 display_order = 5;

  // Provider configuration (non-sensitive fields only)
  string configuration = 6;

  // Created timestamp
  int64 created = 7;

  // Updated timestamp
  int64 updated = 8;

  // Created by user
  string created_by = 9;

  // Updated by user
  string updated_by = 10;
}

// Identity provider instance update request
message IdpInstanceUpdateReq {
  // Identity provider key
  string key = 1;

  // Display name
  string display_name = 2;

  // Whether configuration is enabled
  bool enabled = 3;

  // Display order for UI
  int32 display_order = 4;

  // Provider configuration (including sensitive fields)
  string configuration = 5;
}

// Identity provider instance update response
message IdpInstanceUpdateResp {
  // Success message
  string message = 1;
}

// Identity provider instance delete request
message IdpInstanceDeleteReq {
  // Identity provider key
  string key = 1;
}

// Identity provider instance delete response
message IdpInstanceDeleteResp {
  // Success message
  string message = 1;
}
