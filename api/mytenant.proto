// Copyright Â© 2025 Prabhjot Singh Sethi, All Rights reserved
// Author: Prabhjot Singh Sethi <prabhjot.sethi@gmail.com>

syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "coreapis/api/role.proto";

option go_package = "github.com/go-core-stack/auth-gateway/api";

// service provided to manage tenant configuration
service MyTenant {
  // Get Password policy configuration
  rpc GetMyPasswordPolicy(MyPasswordPolicyGetReq) returns (MyPasswordPolicyGetResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/password-policy"
    };
    option (api.role) = {
      resource: "password-policy"
      verb: "get"
    };
  }

  // Update Password policy configuration
  rpc UpdateMyPasswordPolicy(MyPasswordPolicyUpdateReq) returns (MyPasswordPolicyUpdateResp) {
    option (google.api.http) = {
      put: "/api/mytenant/v1/password-policy"
      body: "*"
    };
    option (api.role) = {
      resource: "password-policy"
      verb: "update"
    };
  }

  // Get Keycloak session limits configuration instructions
  rpc GetKeycloakSessionLimitsInstructions(GetKeycloakSessionLimitsInstructionsReq) returns (GetKeycloakSessionLimitsInstructionsResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/keycloak-session-limits"
    };
    option (api.role) = {
      resource: "session-limits"
      verb: "get"
    };
  }

  // Configure session limits in Keycloak realm (preparation step)
  rpc ConfigureKeycloakSessionLimits(ConfigureKeycloakSessionLimitsReq) returns (ConfigureKeycloakSessionLimitsResp) {
    option (google.api.http) = {
      put: "/api/mytenant/v1/keycloak-session-limits"
      body: "*"
    };
    option (api.role) = {
      resource: "session-limits"
      verb: "update"
    };
  }
}

// password policy get request
message MyPasswordPolicyGetReq {
}

// password policy get response
message MyPasswordPolicyGetResp {
  // minimum number of lower case characters in password
  int32 minLower = 1;

  // minimum number of upper case characters in password
  int32 minUpper = 2;

  // minimum number of digits in password
  int32 minDigits = 3;

  // minimum number of special characters in password
  int32 minSpecial = 4;

  // minimum length of password
  int32 minLength = 5;

  // maximum length of password
  int32 maxLength = 6;

  // do not allow last x recently used passwords
  int32 recentlyUsed = 7;

  // do not allow password reuse before x days
  int32 passwordAge = 8;

  // expire password after x days, trigger force change
  int32 forceExpirePasswordChange = 9;
}

// password policy update request
message MyPasswordPolicyUpdateReq {
  // minimum number of lower case characters in password
  int32 minLower = 1;

  // minimum number of upper case characters in password
  int32 minUpper = 2;

  // minimum number of digits in password
  int32 minDigits = 3;

  // minimum number of special characters in password
  int32 minSpecial = 4;

  // minimum length of password
  int32 minLength = 5;

  // maximum length of password
  int32 maxLength = 6;

  // do not allow last x recently used passwords
  int32 recentlyUsed = 7;

  // do not allow password reuse before x days
  int32 passwordAge = 8;

  // expire password after x days, trigger force change
  int32 forceExpirePasswordChange = 9;
}

// password policy update response
message MyPasswordPolicyUpdateResp {
}

// behavior when session limit is exceeded
enum SessionLimitBehavior {
  // deny new session (reject login)
  DENY = 0;
  // terminate oldest session to allow new login
  TERMINATE = 1;
}

// Keycloak session limits configuration
message KeycloakSessionLimitsConfig {
  // maximum number of concurrent sessions per user
  int32 max_concurrent_sessions = 1;
  
  // behavior when limit is exceeded
  SessionLimitBehavior behavior_when_limit_exceeded = 2;
}

// get Keycloak session limits instructions request
message GetKeycloakSessionLimitsInstructionsReq {
  // optional configuration to generate specific instructions
  KeycloakSessionLimitsConfig config = 1;
}

// get Keycloak session limits instructions response
message GetKeycloakSessionLimitsInstructionsResp {
  // step-by-step instructions for manual configuration
  string instructions = 1;
  
  // current realm name
  string realm = 2;
}

// configure Keycloak session limits request
message ConfigureKeycloakSessionLimitsReq {
  // session limits configuration
  KeycloakSessionLimitsConfig config = 1;
}

// configure Keycloak session limits response
message ConfigureKeycloakSessionLimitsResp {
  // success message
  string message = 1;
  
  // manual configuration instructions
  string instructions = 2;
}
