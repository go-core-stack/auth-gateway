// Copyright Â© 2025 Prabhjot Singh Sethi, All Rights reserved
// Author: Prabhjot Singh Sethi <prabhjot.sethi@gmail.com>

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: tenant.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tenant_ListTenants_FullMethodName  = "/api.Tenant/ListTenants"
	Tenant_CreateTenant_FullMethodName = "/api.Tenant/CreateTenant"
	Tenant_GetTenant_FullMethodName    = "/api.Tenant/GetTenant"
	Tenant_ListOrgUnits_FullMethodName = "/api.Tenant/ListOrgUnits"
)

// TenantClient is the client API for Tenant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service provided to manage tenants
type TenantClient interface {
	// Get List of existing tenants
	ListTenants(ctx context.Context, in *TenantsListReq, opts ...grpc.CallOption) (*TenantsListResp, error)
	// Create a new Tenant
	CreateTenant(ctx context.Context, in *TenantCreateReq, opts ...grpc.CallOption) (*TenantCreateResp, error)
	// Get details of existing tenants
	GetTenant(ctx context.Context, in *TenantGetReq, opts ...grpc.CallOption) (*TenantGetResp, error)
	// Get list of available Org units in the system along with associated tenant
	ListOrgUnits(ctx context.Context, in *TenantOrgUnitsListReq, opts ...grpc.CallOption) (*TenantOrgUnitsListResp, error)
}

type tenantClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantClient(cc grpc.ClientConnInterface) TenantClient {
	return &tenantClient{cc}
}

func (c *tenantClient) ListTenants(ctx context.Context, in *TenantsListReq, opts ...grpc.CallOption) (*TenantsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantsListResp)
	err := c.cc.Invoke(ctx, Tenant_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) CreateTenant(ctx context.Context, in *TenantCreateReq, opts ...grpc.CallOption) (*TenantCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantCreateResp)
	err := c.cc.Invoke(ctx, Tenant_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) GetTenant(ctx context.Context, in *TenantGetReq, opts ...grpc.CallOption) (*TenantGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantGetResp)
	err := c.cc.Invoke(ctx, Tenant_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) ListOrgUnits(ctx context.Context, in *TenantOrgUnitsListReq, opts ...grpc.CallOption) (*TenantOrgUnitsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantOrgUnitsListResp)
	err := c.cc.Invoke(ctx, Tenant_ListOrgUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServer is the server API for Tenant service.
// All implementations must embed UnimplementedTenantServer
// for forward compatibility.
//
// Service provided to manage tenants
type TenantServer interface {
	// Get List of existing tenants
	ListTenants(context.Context, *TenantsListReq) (*TenantsListResp, error)
	// Create a new Tenant
	CreateTenant(context.Context, *TenantCreateReq) (*TenantCreateResp, error)
	// Get details of existing tenants
	GetTenant(context.Context, *TenantGetReq) (*TenantGetResp, error)
	// Get list of available Org units in the system along with associated tenant
	ListOrgUnits(context.Context, *TenantOrgUnitsListReq) (*TenantOrgUnitsListResp, error)
	mustEmbedUnimplementedTenantServer()
}

// UnimplementedTenantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenantServer struct{}

func (UnimplementedTenantServer) ListTenants(context.Context, *TenantsListReq) (*TenantsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedTenantServer) CreateTenant(context.Context, *TenantCreateReq) (*TenantCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedTenantServer) GetTenant(context.Context, *TenantGetReq) (*TenantGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedTenantServer) ListOrgUnits(context.Context, *TenantOrgUnitsListReq) (*TenantOrgUnitsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgUnits not implemented")
}
func (UnimplementedTenantServer) mustEmbedUnimplementedTenantServer() {}
func (UnimplementedTenantServer) testEmbeddedByValue()                {}

// UnsafeTenantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServer will
// result in compilation errors.
type UnsafeTenantServer interface {
	mustEmbedUnimplementedTenantServer()
}

func RegisterTenantServer(s grpc.ServiceRegistrar, srv TenantServer) {
	// If the following call pancis, it indicates UnimplementedTenantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tenant_ServiceDesc, srv)
}

func _Tenant_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).ListTenants(ctx, req.(*TenantsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).CreateTenant(ctx, req.(*TenantCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).GetTenant(ctx, req.(*TenantGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_ListOrgUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantOrgUnitsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).ListOrgUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_ListOrgUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).ListOrgUnits(ctx, req.(*TenantOrgUnitsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tenant_ServiceDesc is the grpc.ServiceDesc for Tenant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tenant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Tenant",
	HandlerType: (*TenantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTenants",
			Handler:    _Tenant_ListTenants_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _Tenant_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _Tenant_GetTenant_Handler,
		},
		{
			MethodName: "ListOrgUnits",
			Handler:    _Tenant_ListOrgUnits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant.proto",
}
