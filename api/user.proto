// Copyright Â© 2025 Prabhjot Singh Sethi, All Rights reserved
// Author: Prabhjot Singh Sethi <prabhjot.sethi@gmail.com>

syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "coreapis/api/role.proto";
import "myaccount.proto";

option go_package = "github.com/go-core-stack/auth-gateway/api";

// Service provided to manage users
service User {
  // Get List of existing users in a tenant
  rpc GetUsers(UsersListReq) returns (UsersListResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/users"
    };
    option (api.role) = {
      resource: "user"
      verb: "list"
    };
  }

  // Create a new user for the given tenant
  rpc CreateUser(UserCreateReq) returns (UserCreateResp) {
    option (google.api.http) = {
      post: "/api/mytenant/v1/user"
      body: "*"
    };
    option (api.role) = {
      resource: "user"
      verb: "create"
    };
  }

  // Get an existing user for the given tenant
  rpc GetUser(UserGetReq) returns (UserGetResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/user/{username}"
    };
    option (api.role) = {
      resource: "user"
      verb: "get"
    };
  }

  // Enable an existing disabled user for the given tenant
  rpc EnableUser(UserEnableReq) returns (UserEnableResp) {
    option (google.api.http) = {
      post: "/api/mytenant/v1/user/{username}/enable"
    };
    option (api.role) = {
      resource: "user"
      verb: "enable"
    };
  }

  // Disable an existing enabled user for the given tenant
  rpc DisableUser(UserDisableReq) returns (UserDisableResp) {
    option (google.api.http) = {
      post: "/api/mytenant/v1/user/{username}/disable"
    };
    option (api.role) = {
      resource: "user"
      verb: "disable"
    };
  }

  // Update an existing user for the given tenant
  rpc UpdateUser(UserUpdateReq) returns (UserUpdateResp) {
    option (google.api.http) = {
      put: "/api/mytenant/v1/user/{username}"
    };
    option (api.role) = {
      resource: "user"
      verb: "update"
    };
  }

  // Delete an existing user for the given tenant
  rpc DeleteUser(UserDeleteReq) returns (UserDeleteResp) {
    option (google.api.http) = {
      delete: "/api/mytenant/v1/user/{username}"
    };
    option (api.role) = {
      resource: "user"
      verb: "delete"
    };
  }

  // List Active sessions, filter by user if provided
  rpc ListUserSessions(UserSessionsListReq) returns (UserSessionsListResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/sessions"
    };
    option (api.role) = {
      resource: "user"
      verb: "get-sessions"
    };
  }

  // logout user from specific session or all sessions
  rpc LogoutUserSession(UserSessionLogoutReq) returns (UserSessionLogoutResp) {
    option (google.api.http) = {
      post: "/api/mytenant/v1/user/{username}/logout"
      body: "*"
    };
    option (api.role) = {
      resource: "user"
      verb: "logout"
    };
  }

  // List org units where a specific user has roles (tenant admin within-tenant access)
  rpc ListUserOrgUnits(UserOrgUnitsListReq) returns (UserOrgUnitsListResp) {
    option (google.api.http) = {
      get: "/api/mytenant/v1/user/{username}/ous"
    };
    option (api.role) = {
      resource: "user"
      verb: "ou-list"
    };
  }
}

// Request List of users in a tenant
message UsersListReq {
  // offset from where to start the list of users
  int32 offset = 1;

  // limit the response to specified count
  int32 limit = 2;

  // prefix match to consider
  string search = 3;
}

// user information for the list entry
message UserListEntry {
  // username or user id
  string username = 1;

  // user email
  string email = 2;

  // first name of user
  string firstName = 3;

  // last name of user
  string lastName = 4;

  // is user enabled
  bool enabled = 5;

  // created since
  int64 created = 6;

  // last access by the user
  int64 lastAccess = 7;
}

// Response to the list of users in a tenant
message UsersListResp {
  // number of users in the tenant
  int32 count = 1;

  // items - list of users
  repeated UserListEntry items = 2;
}

// user create request message
message UserCreateReq {
  // user ID
  string username = 1;

  // email address of the user
  string email = 2;

  // first name of the user
  string firstname = 3;

  // last name of the user
  string lastname = 4;

  // if the user needs to be created disabled
  bool disabled = 5;

  // temporary first login password to be set for the user
  string password = 6;
}

// response to user create request
message UserCreateResp {
  // username or user id
  string username = 1;

  // user email
  string email = 2;

  // first name of user
  string firstName = 3;

  // last name of user
  string lastName = 4;

  // is user enabled
  bool enabled = 5;
}

// delete user request message
message UserDeleteReq {
  // user id which needs to be deleted
  string username = 1;
}

// response to the user delete message
message UserDeleteResp {
}

// get user request message
message UserGetReq {
  // user id which needs to be deleted
  string username = 1;
}

// get user response
message UserGetResp {
  // username or user id
  string username = 1;

  // user email
  string email = 2;

  // first name of user
  string firstName = 3;

  // last name of user
  string lastName = 4;

  // is user enabled
  bool enabled = 5;

  // created since
  int64 created = 6;

  // last access by the user
  int64 lastAccess = 7;
}

// user update request message
message UserUpdateReq {
  // user ID
  string username = 1;

  // email address of the user
  string email = 2;

  // first name of the user
  string firstname = 3;

  // last name of the user
  string lastname = 4;

  // if the user needs to be created disabled
  bool disabled = 5;
}

// response to user update request
message UserUpdateResp {
  // username or user id
  string username = 1;

  // user email
  string email = 2;

  // first name of user
  string firstName = 3;

  // last name of user
  string lastName = 4;

  // is user enabled
  bool enabled = 5;
}

// enable user request
message UserEnableReq {
  // user that needs to be enabled
  string username = 1;
}

// enable user request response
message UserEnableResp {
}

// disable user request
message UserDisableReq {
  // user that needs to be disabled
  string username = 1;
}

// disable user request response
message UserDisableResp {
}

// list active sessions request
message UserSessionsListReq {
  // user name to filter for
  string username = 1;

  // offset to start from
  int32 offset = 2;

  // limit
  int32 limit = 3;
}

// user session information
message UserSessionInfo {
  // user name
  string username = 1;

  // session id
  string sessionId = 2;

  // start time
  int64 started = 3;

  // last access time
  int64 lastAccess = 4;

  // incoming client ip
  string ip = 5;

  // location information based on IP (optional, omitted for private IPs)
  optional Location loc = 6;
}

// response of list active sessions
message UserSessionsListResp {
  // total number of active sessions
  int32 count = 1;

  // list of active sessions
  repeated UserSessionInfo items = 2;
}

// user session logout request
message UserSessionLogoutReq {
  // user to be logged out
  string username = 1;

  // specific session id if any needs to be logged out
  // optional, if not specified all sessions are logged out
  string sessionId = 2;
}

// user session logout response
message UserSessionLogoutResp {
}

// request for listing org units with roles for the current user
message UserOrgUnitsListReq {
  // username parameter from the URL path
  string username = 1;

  // offset from where to start
  int32 offset = 2;

  // limit the number of entries in the response  
  int32 limit = 3;
}

// org unit entry with the current user's role
message UserOrgUnitWithRole {
  // org unit id
  string id = 1;

  // org unit display name
  string name = 2;

  // current user's role in this org unit
  string role = 3;
}

// response for listing org units with user's roles
message UserOrgUnitsListResp {
  // total count of org units the user belongs to
  int32 count = 1;

  // list of org units with the user's roles
  repeated UserOrgUnitWithRole items = 2;
}
