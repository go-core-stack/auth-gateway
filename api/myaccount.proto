// Copyright Â© 2025 Prabhjot Singh Sethi, All Rights reserved
// Author: Prabhjot Singh Sethi <prabhjot.sethi@gmail.com>

syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/go-core-stack/auth-gateway/api";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
    title: "Auth Gateway API Specification"
  }
  external_docs: {
    description: "Auth Gateway API Specification - sample descriptive information"
  }
};

service MyAccount {
  // get my account info
  rpc GetMyInfo(MyInfoGetReq) returns (MyInfoGetResp) {
    option (google.api.http) = {
      get: "/api/myaccount/v1/info"
    };
  }

  // get all my active sessions
  rpc GetMySessions(MySessionsGetReq) returns (MySessionsGetResp) {
    option (google.api.http) = {
      get: "/api/myaccount/v1/sessions"
    };
  }

  // logout my active session(/s), if a specific session id is
  // not provided, it will logout all sessions except the current one
  rpc LogoutMySessions(MySessionsLogoutReq) returns (MySessionsLogoutResp) {
    option (google.api.http) = {
      post: "/api/myaccount/v1/logout-sessions"
      body: "*"
    };
  }

  // create a new api key for api access
  rpc CreateApiKey(ApiKeyCreateReq) returns (ApiKeyCreateResp) {
    option (google.api.http) = {
      post: "/api/myaccount/v1/api-key"
      body: "*"
    };
  }

  // disabling an existing enabled api key, not action is performed
  // if the key is already disabled
  rpc DisableApiKey(ApiKeyDisableReq) returns (ApiKeyDisableResp) {
    option (google.api.http) = {
      post: "/api/myaccount/v1/api-key/{id}/disable"
    };
  }

  // enabling an existing disabled api key, not action is performed
  // if the key is already enabled
  rpc EnableApiKey(ApiKeyEnableReq) returns (ApiKeyEnableResp) {
    option (google.api.http) = {
      post: "/api/myaccount/v1/api-key/{id}/enable"
    };
  }

  // delete an existing api key
  rpc DeleteApiKey(ApiKeyDeleteReq) returns (ApiKeyDeleteResp) {
    option (google.api.http) = {
      delete: "/api/myaccount/v1/api-key/{id}"
    };
  }

  // list all available api keys for the user
  rpc ListApiKeys(ApiKeysListReq) returns (ApiKeysListResp) {
    option (google.api.http) = {
      get: "/api/myaccount/v1/api-keys"
    };
  }

  // list all Org units available for me
  rpc ListMyOrgUnits(MyOrgUnitsListReq) returns (MyOrgUnitsListResp) {
    option (google.api.http) = {
      get: "/api/myaccount/v1/org-units"
    };
  }

  // set specific Org unit as default access on login
  // relevant only when working with multiple org units
  rpc SetDefaultOrgUnit(DefaultOrgUnitReq) returns (DefaultOrgUnitResp) {
    option (google.api.http) = {
      post: "/api/myaccount/v1/org-unit/{id}/default"
    };
  }

  // Get List of available regions for user to work with
  rpc ListMyRegions(MyRegionsListReq) returns (MyRegionsListResp) {
    option (google.api.http) = {
      get: "/api/myaccount/v1/regions"
    };
  }

  // Get List of availability zones in a given region for the user
  rpc ListMyAzs(MyAzsListReq) returns (MyAzsListResp) {
    option (google.api.http) = {
      get: "/api/myaccount/v1/region/{region}/azs"
    };
  }
}

message MyInfoGetReq {
}

message MyInfoGetResp {
  // username which is used for login
  string username = 1;

  // first name of the user
  string firstName = 2;

  // last name of the user
  string lastName = 3;

  // email of the user
  string email = 4;
}

// my session information
message MySessionInfo {
  // session id
  string sessionId = 1;

  // start time
  int64 started = 2;

  // last access time
  int64 lastAccess = 3;

  // incoming client ip
  string ip = 4;
}

// my sessions get response
message MySessionsGetResp {
  repeated MySessionInfo items = 1;
}

// logout session request
message MySessionsLogoutReq {
  string sessionId = 1;
}

// session logout empty response
message MySessionsLogoutResp {
}

message ApiKeyCreateReq {
  // key id will be allocated by virtue of key creation
  // user is expected to provide an optional name for
  // ease of reference, it is recommended to be unique
  // but not validated or ensured to be unique
  string name = 1;

  // validity of the api key, tenure in seconds for
  // which this api key is being created
  // when not set or 0 it means key with no expiry
  int64 validity = 2;

  // TODO eventually we will have ApiKeys to work with
  // session approvers to provide better security
}

message ApiKeyDef {
  enum Status {
    // ApiKey is active
    Active = 0;

    // ApiKey has expired
    Expired = 1;

    // ApiKey is disabled
    Disabled = 2;
  }
}

message ApiKeyCreateResp {
  // name of the api key provided by the creator
  string name = 1;

  // ID of the access key that will be used by the
  // client and server to identify ApiKey in use
  string id = 2;

  // current status of the Api Key
  ApiKeyDef.Status status = 3;

  // timestamp when the api key was used last time
  int64 lastUsed = 4;

  // timestamp when the api key was created
  int64 created = 5;

  // timestamp when the api key will expire
  int64 expireAt = 6;

  // Secret to be used in conjunction with key id
  // for authentication of client using the api key
  // but typically the auth mechanism used will not
  // expect to share this secret ever on the wire
  // after it is being created, neither on APIs nor
  // for authentication
  string secret = 7;
}

message ApiKeyDisableReq {
  // key id that needs to be disabled
  string id = 1;
}

message ApiKeyDisableResp {
}

message ApiKeyEnableReq {
  // key id that needs to be enabled
  string id = 1;
}

message ApiKeyEnableResp {
}

message ApiKeyDeleteReq {
  // key id that needs to be deleted
  string id = 1;
}

message ApiKeyDeleteResp {
}

message ApiKeysListReq {
}

message ApiKeyListEntry {
  // name of the api key provided by the creator
  string name = 1;

  // ID of the access key that will be used by the
  // client and server to identify ApiKey in use
  string id = 2;

  // current status of the Api Key
  ApiKeyDef.Status status = 3;

  // timestamp when the api key was used last time
  int64 lastUsed = 4;

  // timestamp when the api key was created
  int64 created = 5;

  // timestamp when the api key will expire
  int64 expireAt = 6;
}

message ApiKeysListResp {
  repeated ApiKeyListEntry items = 1;
}

// my sessions get req
message MySessionsGetReq {
}

message MyOrgUnitsListReq {
}

message MyOrgUnitEntry {
  // org unit id
  string id = 1;

  // org unit display name
  string name = 2;
}

message MyOrgUnitsListResp {
  // default Org Unit for the user
  MyOrgUnitEntry default = 1;

  // list of available org units for user
  // inclusive of default Org unit
  repeated MyOrgUnitEntry items = 2;
}

message DefaultOrgUnitReq {
  // id of the Org Unit to be set as default
  string id = 1;
}

message DefaultOrgUnitResp {
}

message MyRegionsListReq {
}

message MyRegionsListEntry {
  // identifier of the region
  string id = 1;

  // name of the region typically unique for tenant
  string name = 2;
}

message MyRegionsListResp {
  // default region for the user
  MyRegionsListEntry default = 1;

  // list of available regions for the tenant
  // inclusive of the set default region
  repeated MyRegionsListEntry items = 2;
}

message MyAzsListReq {
  // region under consideration
  string region = 1;
}

message MyAzsListEntry {
  // identifier of the availability zone
  string id = 1;

  // name of the availability zone
  string name = 2;
}

message MyAzsListResp {
  // list of available azs for the tenant
  // under a region
  repeated MyAzsListEntry items = 2;
}
