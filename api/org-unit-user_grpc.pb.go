// Copyright Â© 2025 Prabhjot Singh Sethi, All Rights reserved
// Author: Prabhjot Singh Sethi <prabhjot.sethi@gmail.com>

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: org-unit-user.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrgUnitUser_ListOrgUnitUsers_FullMethodName  = "/api.OrgUnitUser/ListOrgUnitUsers"
	OrgUnitUser_AddOrgUnitUser_FullMethodName    = "/api.OrgUnitUser/AddOrgUnitUser"
	OrgUnitUser_UpdateOrgUnitUser_FullMethodName = "/api.OrgUnitUser/UpdateOrgUnitUser"
	OrgUnitUser_DeleteOrgUnitUser_FullMethodName = "/api.OrgUnitUser/DeleteOrgUnitUser"
)

// OrgUnitUserClient is the client API for OrgUnitUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service provided to manage org unit users
type OrgUnitUserClient interface {
	// Get List of available org unit users
	ListOrgUnitUsers(ctx context.Context, in *OrgUnitUsersListReq, opts ...grpc.CallOption) (*OrgUnitUsersListResp, error)
	// Add user to the org unit
	AddOrgUnitUser(ctx context.Context, in *OrgUnitUserAddReq, opts ...grpc.CallOption) (*OrgUnitUserAddResp, error)
	// Update user role to the org unit
	UpdateOrgUnitUser(ctx context.Context, in *OrgUnitUserUpdateReq, opts ...grpc.CallOption) (*OrgUnitUserUpdateResp, error)
	// delete user role to the org unit
	DeleteOrgUnitUser(ctx context.Context, in *OrgUnitUserDeleteReq, opts ...grpc.CallOption) (*OrgUnitUserDeleteResp, error)
}

type orgUnitUserClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgUnitUserClient(cc grpc.ClientConnInterface) OrgUnitUserClient {
	return &orgUnitUserClient{cc}
}

func (c *orgUnitUserClient) ListOrgUnitUsers(ctx context.Context, in *OrgUnitUsersListReq, opts ...grpc.CallOption) (*OrgUnitUsersListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUnitUsersListResp)
	err := c.cc.Invoke(ctx, OrgUnitUser_ListOrgUnitUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgUnitUserClient) AddOrgUnitUser(ctx context.Context, in *OrgUnitUserAddReq, opts ...grpc.CallOption) (*OrgUnitUserAddResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUnitUserAddResp)
	err := c.cc.Invoke(ctx, OrgUnitUser_AddOrgUnitUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgUnitUserClient) UpdateOrgUnitUser(ctx context.Context, in *OrgUnitUserUpdateReq, opts ...grpc.CallOption) (*OrgUnitUserUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUnitUserUpdateResp)
	err := c.cc.Invoke(ctx, OrgUnitUser_UpdateOrgUnitUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgUnitUserClient) DeleteOrgUnitUser(ctx context.Context, in *OrgUnitUserDeleteReq, opts ...grpc.CallOption) (*OrgUnitUserDeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUnitUserDeleteResp)
	err := c.cc.Invoke(ctx, OrgUnitUser_DeleteOrgUnitUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgUnitUserServer is the server API for OrgUnitUser service.
// All implementations must embed UnimplementedOrgUnitUserServer
// for forward compatibility.
//
// Service provided to manage org unit users
type OrgUnitUserServer interface {
	// Get List of available org unit users
	ListOrgUnitUsers(context.Context, *OrgUnitUsersListReq) (*OrgUnitUsersListResp, error)
	// Add user to the org unit
	AddOrgUnitUser(context.Context, *OrgUnitUserAddReq) (*OrgUnitUserAddResp, error)
	// Update user role to the org unit
	UpdateOrgUnitUser(context.Context, *OrgUnitUserUpdateReq) (*OrgUnitUserUpdateResp, error)
	// delete user role to the org unit
	DeleteOrgUnitUser(context.Context, *OrgUnitUserDeleteReq) (*OrgUnitUserDeleteResp, error)
	mustEmbedUnimplementedOrgUnitUserServer()
}

// UnimplementedOrgUnitUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrgUnitUserServer struct{}

func (UnimplementedOrgUnitUserServer) ListOrgUnitUsers(context.Context, *OrgUnitUsersListReq) (*OrgUnitUsersListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgUnitUsers not implemented")
}
func (UnimplementedOrgUnitUserServer) AddOrgUnitUser(context.Context, *OrgUnitUserAddReq) (*OrgUnitUserAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgUnitUser not implemented")
}
func (UnimplementedOrgUnitUserServer) UpdateOrgUnitUser(context.Context, *OrgUnitUserUpdateReq) (*OrgUnitUserUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgUnitUser not implemented")
}
func (UnimplementedOrgUnitUserServer) DeleteOrgUnitUser(context.Context, *OrgUnitUserDeleteReq) (*OrgUnitUserDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrgUnitUser not implemented")
}
func (UnimplementedOrgUnitUserServer) mustEmbedUnimplementedOrgUnitUserServer() {}
func (UnimplementedOrgUnitUserServer) testEmbeddedByValue()                     {}

// UnsafeOrgUnitUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgUnitUserServer will
// result in compilation errors.
type UnsafeOrgUnitUserServer interface {
	mustEmbedUnimplementedOrgUnitUserServer()
}

func RegisterOrgUnitUserServer(s grpc.ServiceRegistrar, srv OrgUnitUserServer) {
	// If the following call pancis, it indicates UnimplementedOrgUnitUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrgUnitUser_ServiceDesc, srv)
}

func _OrgUnitUser_ListOrgUnitUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUnitUsersListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUnitUserServer).ListOrgUnitUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgUnitUser_ListOrgUnitUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUnitUserServer).ListOrgUnitUsers(ctx, req.(*OrgUnitUsersListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgUnitUser_AddOrgUnitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUnitUserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUnitUserServer).AddOrgUnitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgUnitUser_AddOrgUnitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUnitUserServer).AddOrgUnitUser(ctx, req.(*OrgUnitUserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgUnitUser_UpdateOrgUnitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUnitUserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUnitUserServer).UpdateOrgUnitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgUnitUser_UpdateOrgUnitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUnitUserServer).UpdateOrgUnitUser(ctx, req.(*OrgUnitUserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgUnitUser_DeleteOrgUnitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUnitUserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUnitUserServer).DeleteOrgUnitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgUnitUser_DeleteOrgUnitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUnitUserServer).DeleteOrgUnitUser(ctx, req.(*OrgUnitUserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgUnitUser_ServiceDesc is the grpc.ServiceDesc for OrgUnitUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgUnitUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.OrgUnitUser",
	HandlerType: (*OrgUnitUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrgUnitUsers",
			Handler:    _OrgUnitUser_ListOrgUnitUsers_Handler,
		},
		{
			MethodName: "AddOrgUnitUser",
			Handler:    _OrgUnitUser_AddOrgUnitUser_Handler,
		},
		{
			MethodName: "UpdateOrgUnitUser",
			Handler:    _OrgUnitUser_UpdateOrgUnitUser_Handler,
		},
		{
			MethodName: "DeleteOrgUnitUser",
			Handler:    _OrgUnitUser_DeleteOrgUnitUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org-unit-user.proto",
}
